/* tslint:disable:no-unused-locals */
import { ZObject } from 'zapier-platform-core'
import { ObjectSerializer } from '../model/models';
import { generateInputFields, transformInputData, InputBundle } from './apis';
import { addHeaders } from '../authentication';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

const activityCreateInput = [
    {
        key: 'user',
        required: false,
        label: 'User',
        helpText: 'Test',
    },
    {
        key: 'time',
        required: false,
        label: 'Time',
        helpText: 'Test',
    },
    {
        key: 'action',
        required: false,
        label: 'Action',
        helpText: 'Test',
        choices: {
                'Create': 'Create',
                'Update': 'Update',
                'Move': 'Move',
                'Copy': 'Copy',
                'Draft': 'Draft',
                'Send': 'Send',
                'Modified': 'Modified',
                'Delete': 'Delete',
                'Contact Import File': 'Contact Import File',
                'Login': 'Login',
                'Approve': 'Approve',
                'Reject': 'Reject',
                'Dispatch': 'Dispatch',
                'Register': 'Register',
                'Accept': 'Accept',
                'Closed': 'Closed',
                'Map': 'Map',
                'Un-map': 'Un-map',
                'Logout': 'Logout',
        }
    },
    {
        key: 'description',
        required: false,
        label: 'Description',
        helpText: 'Test',
    },
    {
        key: 'status',
        required: false,
        label: 'Status',
        helpText: 'Test',
    },
    {
        key: 'module',
        required: false,
        label: 'Module',
        helpText: 'Test',
        choices: {
                'System': 'System',
                'Message': 'Message',
                'Scheduled Message': 'Scheduled Message',
                'User': 'User',
                'Contact': 'Contact',
                'Distribution List': 'Distribution List',
                'Template': 'Template',
                'Workspace': 'Workspace',
                'Event': 'Event',
                'WebService': 'WebService',
                'Settings': 'Settings',
                'Conversation': 'Conversation',
                'Gateway': 'Gateway',
                'Workspace Mapping': 'Workspace Mapping',
                'Folders': 'Folders',
                'Team': 'Team',
                'RSS': 'RSS',
                'API Mapping': 'API Mapping',
                'Asset': 'Asset',
                'Instruction': 'Instruction',
        }
    },
    {
        key: 'workspaceName',
        required: false,
        label: 'WorkspaceName',
        helpText: 'Test',
    },
    {
        key: 'fullname',
        required: false,
        label: 'Fullname',
        helpText: 'Test',
    },

] as const;

const activityListInput = [
    {
        key: 'limit',
        required: false,
        label: 'limit',
        helpText: 'Test',
    },
    {
        key: 'offset',
        required: false,
        label: 'offset',
        helpText: 'Test',
    },
    {
        key: 'sortOrder',
        required: false,
        label: 'sortOrder',
        helpText: 'Test',
        choices: {
            'asc': 'asc',
            'desc': 'desc',
        },
    },
    {
        key: 'sortFields',
        required: false,
        label: 'sortFields',
        helpText: 'Test',
    },
    {
        key: 'action',
        required: false,
        label: 'action',
        helpText: 'Test',
        choices: {
            'Create': 'Create',
            'Update': 'Update',
            'Move': 'Move',
            'Copy': 'Copy',
            'Draft': 'Draft',
            'Send': 'Send',
            'Modified': 'Modified',
            'Delete': 'Delete',
            'Contact Import File': 'Contact Import File',
            'Login': 'Login',
            'Approve': 'Approve',
            'Reject': 'Reject',
            'Dispatch': 'Dispatch',
            'Register': 'Register',
            'Accept': 'Accept',
            'Closed': 'Closed',
            'Map': 'Map',
            'Un-map': 'Un-map',
        },
    },
    {
        key: 'module',
        required: false,
        label: 'module',
        helpText: 'Test',
        choices: {
            'System': 'System',
            'Message': 'Message',
            'Scheduled Message': 'Scheduled Message',
            'User': 'User',
            'Contact': 'Contact',
            'DistributionList': 'DistributionList',
            'Template': 'Template',
            'Workspace': 'Workspace',
            'Event': 'Event',
            'WebService': 'WebService',
            'Settings': 'Settings',
            'Conversation': 'Conversation',
            'Gateway': 'Gateway',
            'Workspace Mapping': 'Workspace Mapping',
            'Folders': 'Folders',
            'Team': 'Team',
            'RSS': 'RSS',
            'API Mapping': 'API Mapping',
            'Asset': 'Asset',
            'Instruction': 'Instruction',
        },
    },
    {
        key: 'user',
        required: false,
        label: 'user',
        helpText: 'Test',
    },
    {
        key: 'workspace',
        required: false,
        label: 'workspace',
        helpText: 'Test',
    },
    {
        key: 'status',
        required: false,
        label: 'status',
        helpText: 'Test',
        choices: {
            'Successful': 'Successful',
            'Failed': 'Failed',
            'Rejected': 'Rejected',
        },
    },
    {
        key: 'description',
        required: false,
        label: 'description',
        helpText: 'Test',
    },
    {
        key: 'startTime',
        required: false,
        label: 'Start time',
        helpText: 'Test',
    },
    {
        key: 'endTime',
        required: false,
        label: 'End time',
        helpText: 'Test',
    },
] as const;

const activityWorkspaceListInput = [
    {
        key: 'workspaceId',
        required: true,
        label: 'workspaceId',
        helpText: 'Test',
    },
    {
        key: 'limit',
        required: false,
        label: 'limit',
        helpText: 'Test',
    },
    {
        key: 'offset',
        required: false,
        label: 'offset',
        helpText: 'Test',
    },
    {
        key: 'sortOrder',
        required: false,
        label: 'sortOrder',
        helpText: 'Test',
        choices: {
            'asc': 'asc',
            'desc': 'desc',
        },
    },
    {
        key: 'sortFields',
        required: false,
        label: 'sortFields',
        helpText: 'Test',
    },
] as const;


export const ActivitiesApi = {
  key: 'activities',
  noun: 'Activities',
  create: {
    display: {
        label: 'Create a Activities',
        description: 'Test'
    },
    operation: {
        inputFields: generateInputFields(activityCreateInput),
        perform: async (z: ZObject, bundle: InputBundle<typeof activityCreateInput>) => {
            const {
                ...activity
            } = transformInputData(bundle.inputData);

            const localVarPath = bundle.authData.host + '/activities';
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = {};

            let localVarFormParams: any = {};
            localVarHeaderParams['Content-Type'] = 'application/vnd.whispir.activity-v1+json';
            localVarHeaderParams['Accept'] = 'application/vnd.whispir.activity-v1+json';

            let localVarUseFormData = false;

            const responsePromise = z.request({
                method: 'POST',
                headers: addHeaders(localVarHeaderParams, bundle),
                params: localVarQueryParameters,
                url: localVarPath,
                body: ObjectSerializer.serialize(activity, "Activity")
            });
            return responsePromise
                .then(response => {
                    if (response.status && response.status >= 200 && response.status <= 299) {
                            let body = {};
                            body = ObjectSerializer.deserialize(response.data, "Activity");
                            
                            // Special case to extract the resource identifier from the `Location` header.
                            const checkLocation = response?.headers?.location?.match(/\/([^\/]+)\/?$/);
                            let id = (checkLocation && checkLocation[1]) ? checkLocation[1] : undefined;
                            
                            return { id, ...body };
                    } else {
                            throw new z.errors.Error(response.data);
                    }
                });
        },
    }
  },
};
