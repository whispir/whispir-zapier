/* tslint:disable:no-unused-locals */
import { ZObject } from "zapier-platform-core";
import { ObjectSerializer } from "../model/models";
import { generateInputFields, transformInputData, InputBundle } from "./apis";
import { addHeaders } from "../authentication";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

const workspaceCreateInput = [
  {
    key: "projectName",
    required: true,
    label: "ProjectName",
    helpText: "Test",
  },
  {
    key: "projectNumber",
    required: false,
    label: "ProjectNumber",
    helpText: "Test",
  },
  {
    key: "status",
    required: true,
    label: "Status",
    helpText: "Test",
  },
  {
    key: "billingcostcentre",
    required: false,
    label: "Billingcostcentre",
    helpText: "Test",
  },
] as const;

const workspaceListInput = [
  {
    key: "limit",
    required: false,
    label: "limit",
    helpText: "Test",
  },
  {
    key: "offset",
    required: false,
    label: "offset",
    helpText: "Test",
  },
  {
    key: "sortOrder",
    required: false,
    label: "sortOrder",
    helpText: "Test",
    choices: {
      asc: "asc",
      desc: "desc",
    },
  },
  {
    key: "sortFields",
    required: false,
    label: "sortFields",
    helpText: "Test",
  },
] as const;

const workspaceRetrieveInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
  },
] as const;

const workspaceUpdateInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
  },
  {
    key: "projectName",
    required: true,
    label: "ProjectName",
    helpText: "Test",
  },
  {
    key: "projectNumber",
    required: false,
    label: "ProjectNumber",
    helpText: "Test",
  },
  {
    key: "status",
    required: true,
    label: "Status",
    helpText: "Test",
  },
  {
    key: "billingcostcentre",
    required: false,
    label: "Billingcostcentre",
    helpText: "Test",
  },
] as const;

export const WorkspacesApi = {
  key: "workspaces",
  noun: "Workspaces",
  create: {
    display: {
      label: "Create a Workspaces",
      description: "Test",
      hidden: true,
    },
    operation: {
      inputFields: generateInputFields(workspaceCreateInput),
      perform: async (
        z: ZObject,
        bundle: InputBundle<typeof workspaceCreateInput>
      ) => {
        const { ...workspace } = transformInputData(bundle.inputData);

        const localVarPath = bundle.authData.host + "/workspaces";
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = {};

        let localVarFormParams: any = {};
        localVarHeaderParams["Content-Type"] =
          "application/vnd.whispir.workspace-v1+json";
        localVarHeaderParams["Accept"] =
          "application/vnd.whispir.workspace-v1+json";

        let localVarUseFormData = false;

        const responsePromise = z.request({
          method: "POST",
          headers: addHeaders(localVarHeaderParams, bundle),
          params: localVarQueryParameters,
          url: localVarPath,
          body: ObjectSerializer.serialize(workspace, "Workspace"),
        });
        return responsePromise.then((response) => {
          if (
            response.status &&
            response.status >= 200 &&
            response.status <= 299
          ) {
            let body = {};
            body = ObjectSerializer.deserialize(response.data, "Workspace");

            // Special case to extract the resource identifier from the `Location` header.
            const checkLocation =
              response?.headers?.location?.match(/\/([^\/]+)\/?$/);
            let id =
              checkLocation && checkLocation[1] ? checkLocation[1] : undefined;

            return { id, ...body };
          } else {
            throw new z.errors.Error(response.data);
          }
        });
      },
    },
  },
  list: {
    display: {
      label: "List Workspaces",
      description:
        "Triggers when selecting a value for workspaceId is required.",
      hidden: true,
    },
    operation: {
      inputFields: generateInputFields(workspaceListInput),
      perform: async (
        z: ZObject,
        bundle: InputBundle<typeof workspaceListInput>
      ) => {
        const localVarPath = bundle.authData.host + "/workspaces";
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = {};

        let localVarFormParams: any = {};
        localVarHeaderParams["Content-Type"] =
          "application/vnd.whispir.workspace-v1+json";
        localVarHeaderParams["Accept"] =
          "application/vnd.whispir.workspace-v1+json";

        let localVarUseFormData = false;

        const responsePromise = z.request({
          method: "GET",
          headers: addHeaders(localVarHeaderParams, bundle),
          params: localVarQueryParameters,
          url: localVarPath,
        });

        return responsePromise.then((response) => {
          if (
            response.status &&
            response.status >= 200 &&
            response.status <= 299
          ) {
            const { workspaces } = response.data;
            return workspaces;
          } else {
            throw new z.errors.Error(response.data);
          }
        });
      },
      sample: {
        workspaces: [
          {
            id: "673A8E38D34BBF0C",
            projectName: "All Templates",
            projectNumber: "",
            status: "A",
            billingcostcentre: "all templates",
            link: [
              {
                uri: "https://api.au.whispir.com/workspaces/673A8E38D34BBF0C",
                rel: "self",
                method: "GET",
                host: "api.au.whispir.com",
                port: -1,
              },
            ],
          },
        ],
        status: "1 to 8 of 8    ",
        link: [],
      },
    },
  },
};
