/* tslint:disable:no-unused-locals */
import { ZObject } from "zapier-platform-core";
import { DistributionList, ObjectSerializer } from "../model/models";
import { generateInputFields, transformInputData, InputBundle } from "./apis";
import { addHeaders } from "../authentication";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

const distributionListCreateInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
    dynamic: "workspaces.id.projectName",
  },
  {
    key: "name",
    required: true,
    label: "Name",
    helpText: "Test",
  },
  {
    key: "description",
    required: false,
    label: "Description",
    helpText: "Test",
  },
  {
    key: "memberCount",
    required: false,
    label: "MemberCount",
    helpText: "Test",
  },
  {
    key: "access",
    required: false,
    label: "Access",
    helpText: "Test",
  },
  {
    key: "visibility",
    required: false,
    label: "Visibility",
    helpText: "Test",
  },
  {
    key: "contactIds",
    required: false,
    label: "ContactIds",
    helpText: "Test",
  },
  {
    key: "userIds",
    required: false,
    label: "UserIds",
    helpText: "Test",
  },
  {
    key: "distListIds",
    required: false,
    label: "DistListIds",
    helpText: "Test",
  },
  {
    key: "type",
    required: false,
    label: "Type",
    helpText: "Test",
    choices: {
      static: "static",
      dynamic: "dynamic",
    },
  },
  {
    key: "rules",
    required: false,
    label: "Rules",
    helpText: "Test",
  },
] as const;

const distributionListDeleteInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
  },
  {
    key: "distributionlistId",
    required: true,
    label: "distributionlistId",
    helpText: "Test",
  },
] as const;

const distributionListListInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
    dynamic: "workspaces.id.projectName,projectDescription",
  },
  {
    key: "limit",
    required: false,
    label: "limit",
    helpText: "Test",
  },
  {
    key: "offset",
    required: false,
    label: "offset",
    helpText: "Test",
  },
  {
    key: "sortOrder",
    required: false,
    label: "sortOrder",
    helpText: "Test",
    choices: {
      asc: "asc",
      desc: "desc",
    },
  },
  {
    key: "sortFields",
    required: false,
    label: "sortFields",
    helpText: "Test",
  },
  {
    key: "name",
    required: false,
    label: "name",
    helpText: "Test",
  },
  {
    key: "description",
    required: false,
    label: "description",
    helpText: "Test",
  },
] as const;

const distributionListRetrieveInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
    dynamic: "workspaces.id.projectName",
  },
  {
    key: "distributionListId",
    required: true,
    label: "distributionListId",
    helpText: "Test",
  },
] as const;

const distributionListUpdateInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
    dynamic: "workspaces.id.projectName",
  },
  {
    key: "distributionListId",
    required: true,
    label: "distributionListId",
    helpText: "Test",
    dynamic: "distributionLists.id.name",
    search: "distributionListsSearch.id",
  },
  {
    key: "name",
    required: true,
    label: "Name",
    helpText: "Test",
  },
  {
    key: "description",
    required: false,
    label: "Description",
    helpText: "Test",
  },
  {
    key: "memberCount",
    required: false,
    label: "MemberCount",
    helpText: "Test",
  },
  {
    key: "access",
    required: true,
    label: "Access",
    helpText: "Test",
    choices: {
      Open: "Open",
      ByApproval: "ByApproval",
      ViewOnly: "ViewOnly",
      Restricted: "Restricted",
    },
  },
  {
    key: "visibility",
    required: true,
    label: "Visibility",
    helpText: "Test",
    choices: {
      Private: "Private",
      Public: "Public",
    },
  },
  {
    key: "contactIds",
    required: false,
    label: "ContactIds",
    dynamic: "contacts.id.firstName,lastName",
    helpText: "Test",
  },
  {
    key: "userIds",
    required: false,
    label: "UserIds",
    helpText: "Test",
  },
  {
    key: "distListIds",
    required: false,
    label: "DistListIds",
    helpText: "Test",
    dynamic: "distributionLists.id.name",
  },
  {
    key: "type",
    required: false,
    label: "Type",
    helpText: "Test",
    choices: {
      static: "static",
      dynamic: "dynamic",
    },
  },
  {
    key: "rules",
    required: false,
    label: "Rules",
    helpText: "Test",
  },
] as const;

export const updateDistributionList = {
  key: "distributionLists",
  noun: "distributionList",
  display: {
    label: "Update Distribution List",
    description:
      "Any or all three of these can be updated via the PUT method along with the DL properties (name, description, location etc)",
  },
  operation: {
    inputFields: generateInputFields(distributionListUpdateInput),
    perform: async (
      z: ZObject,
      bundle: InputBundle<typeof distributionListUpdateInput>
    ) => {
      const { workspaceId, distributionListId, ...distributionList } =
        transformInputData(bundle.inputData);

      const localVarPath =
        bundle.authData.host +
        "/workspaces/{workspaceId}/distributionlists".replace(
          "{" + "workspaceId" + "}",
          encodeURIComponent(String(workspaceId))
        ) +
        "/" +
        encodeURIComponent(String(distributionListId));

      let localVarQueryParameters: any = {};
      let localVarHeaderParams: any = {};

      localVarHeaderParams["Accept"] =
        "application/vnd.whispir.distributionlist-v1+json";
      localVarHeaderParams["Content-Type"] =
        "application/vnd.whispir.distributionlist-v1+json";

      let localVarUseFormData = false;

      const responsePromise = z.request({
        method: "PUT",
        headers: addHeaders(localVarHeaderParams, bundle),
        params: localVarQueryParameters,
        url: localVarPath,
        body: ObjectSerializer.serialize(distributionList, "DistributionList"),
      });
      return responsePromise.then((response) => {
        if (
          response.status &&
          response.status >= 200 &&
          response.status <= 299
        ) {
          let body = {};
          body = ObjectSerializer.deserialize(response.data, "DistributionList");

          return { id: distributionListId, ...body };
        } else {
          throw new z.errors.Error(response.data);
        }
      });
    },
  },
};

export const DistributionListsApi = {
  key: "distributionLists",
  noun: "DistributionLists",
  list: {
    display: {
      label: "List Distribution Lists",
      description: "List distribution lists for a given workspace",
      hidden: true,
    },
    operation: {
      inputFields: generateInputFields(distributionListListInput),
      perform: async (
        z: ZObject,
        bundle: InputBundle<typeof distributionListListInput>
      ) => {
        const { workspaceId } = transformInputData(bundle.inputData);

        const localVarPath =
          bundle.authData.host +
          "/workspaces/{workspaceId}/distributionlists".replace(
            "{" + "workspaceId" + "}",
            encodeURIComponent(String(workspaceId))
          );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = {};

        let localVarFormParams: any = {};
        localVarHeaderParams["Content-Type"] =
          "application/vnd.whispir.distributionlist-v1+json";
        localVarHeaderParams["Accept"] =
          "application/vnd.whispir.distributionlist-v1+json";

        let localVarUseFormData = false;

        const responsePromise = z.request({
          method: "GET",
          headers: addHeaders(localVarHeaderParams, bundle),
          params: localVarQueryParameters,
          url: localVarPath,
        });
        return responsePromise.then((response) => {
          if (
            response.status &&
            response.status >= 200 &&
            response.status <= 299
          ) {
            const { distributionLists } = response.data;

            return distributionLists;
          } else {
            throw new z.errors.Error(response.data);
          }
        });
      },
      sample: {
        distributionLists: [
          {
            id: "1E4A6C7C452E9BF0",
            name: "List-A",
            mri: "List-A.Devex_Test_Workspace@list.project.whispir.com",
            description: "Dummy distribution list for testing",
            memberCount: "1",
            access: "Restricted",
            visibility: "Private",
            link: [
              {
                uri: "https://api.au.whispir.com/workspaces/6B6B47E983931C11/distributionlists/1E4A6C7C452E9BF0",
                rel: "self",
                method: "GET",
                host: "api.au.whispir.com",
                port: -1,
              },
            ],
          },
        ],
        status: "1 to 1 of 1    ",
        link: [],
      },
    },
  },
  search: {
    display: {
      label: "Find Distribution List",
      description: "Test",
      hidden: true,
    },
    operation: {
      inputFields: generateInputFields(distributionListRetrieveInput),
      perform: async (
        z: ZObject,
        bundle: InputBundle<typeof distributionListRetrieveInput>
      ) => {
        const { workspaceId, distributionListId } = transformInputData(
          bundle.inputData
        );

        const localVarPath =
          bundle.authData.host +
          "/workspaces/{workspaceId}/distributionlists".replace(
            "{" + "workspaceId" + "}",
            encodeURIComponent(String(workspaceId)) +
              "/" +
              encodeURIComponent(String(distributionListId))
          );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = {};

        let localVarFormParams: any = {};
        localVarHeaderParams["Content-Type"] =
          "application/vnd.whispir.distributionlist-v1+json";
        localVarHeaderParams["Accept"] =
          "application/vnd.whispir.distributionlist-v1+json";

        let localVarUseFormData = false;

        const responsePromise = z.request({
          method: "GET",
          headers: addHeaders(localVarHeaderParams, bundle),
          params: localVarQueryParameters,
          url: localVarPath,
        });
        return responsePromise.then((response) => {
          if (
            response.status &&
            response.status >= 200 &&
            response.status <= 299
          ) {
            return { id: distributionListId, ...response.data };
          } else {
            throw new z.errors.Error(response.data);
          }
        });
      },
    },
  },
};
