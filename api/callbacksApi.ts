/* tslint:disable:no-unused-locals */
import { ZObject } from 'zapier-platform-core'
import { ObjectSerializer } from '../model/models';
import { generateInputFields, transformInputData, InputBundle } from './apis';
import { addHeaders } from '../authentication';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

const callbackCallListInput = [
    {
        key: 'callbackId',
        required: true,
        label: 'callbackId',
        helpText: 'Test',
    },
    {
        key: 'limit',
        required: false,
        label: 'limit',
        helpText: 'Test',
    },
    {
        key: 'offset',
        required: false,
        label: 'offset',
        helpText: 'Test',
    },
    {
        key: 'sortOrder',
        required: false,
        label: 'sortOrder',
        helpText: 'Test',
        choices: {
            'asc': 'asc',
            'desc': 'desc',
        },
    },
    {
        key: 'sortFields',
        required: false,
        label: 'sortFields',
        helpText: 'Test',
    },
    {
        key: 'status',
        required: false,
        label: 'status',
        helpText: 'Test',
        choices: {
            'SUCCESS': 'SUCCESS',
            'FAILED': 'FAILED',
        },
    },
] as const;

const callbackCallUpdateInput = [
    {
        key: 'callbackId',
        required: true,
        label: 'callbackId',
        helpText: 'Test',
    },
    {
        key: 'id',
        required: true,
        label: 'id',
        helpText: 'Test',
    },
    {
        key: 'status',
        required: true,
        label: 'Status',
        helpText: 'Test',
        choices: {
                'SUCCESS': 'SUCCESS',
                'FAILED': 'FAILED',
        }
    },
    {
        key: 'from',
        required: false,
        label: 'From',
        properties: [
            
        ],
    },
    {
        key: 'responseMessage',
        required: false,
        label: 'ResponseMessage',
        properties: [
            
        ],
    },
    {
        key: 'callback',
        required: false,
        label: 'Callback',
        properties: [
            
        ],
    },

] as const;

const callbackCreateInput = [
    {
        key: 'name',
        required: true,
        label: 'Name',
        helpText: 'Test',
    },
    {
        key: 'url',
        required: true,
        label: 'Url',
        helpText: 'Test',
    },
    {
        key: 'auth',
        required: true,
        label: 'Auth',
        properties: [
                {
        key: 'type',
        required: false,
        label: 'Type',
        helpText: 'Test',
        choices: {
                'queryparam': 'queryparam',
                'httpheader': 'httpheader',
                'basicauth': 'basicauth',
                'bearertoken': 'bearertoken',
        }
    },
    {
        key: 'key',
        required: true,
        label: 'Key',
        helpText: 'Test',
    },

        ],
    },
    {
        key: 'contentType',
        required: true,
        label: 'ContentType',
        helpText: 'Test',
        choices: {
                'json': 'json',
                'xml': 'xml',
        }
    },
    {
        key: 'removeHTML',
        required: false,
        label: 'RemoveHTML',
        helpText: 'Test',
        choices: {
                'enabled': 'enabled',
                'disabled': 'disabled',
        }
    },
    {
        key: 'retriesEnabled',
        required: false,
        label: 'RetriesEnabled',
        helpText: 'Test',
    },
    {
        key: 'email',
        required: true,
        label: 'Email',
        helpText: 'Test',
    },
    {
        key: 'callbacks',
        required: true,
        label: 'Callbacks',
        properties: [
                {
        key: 'reply',
        required: false,
        label: 'Reply',
        helpText: 'Test',
        choices: {
                'enabled': 'enabled',
                'disabled': 'disabled',
        }
    },
    {
        key: 'undeliverable',
        required: false,
        label: 'Undeliverable',
        helpText: 'Test',
        choices: {
                'enabled': 'enabled',
                'disabled': 'disabled',
        }
    },

        ],
    },

] as const;

const callbackDeleteInput = [
    {
        key: 'callbackId',
        required: true,
        label: 'callbackId',
        helpText: 'Test',
    },
] as const;

const callbackListInput = [
    {
        key: 'limit',
        required: false,
        label: 'limit',
        helpText: 'Test',
    },
    {
        key: 'offset',
        required: false,
        label: 'offset',
        helpText: 'Test',
    },
    {
        key: 'sortOrder',
        required: false,
        label: 'sortOrder',
        helpText: 'Test',
        choices: {
            'asc': 'asc',
            'desc': 'desc',
        },
    },
    {
        key: 'sortFields',
        required: false,
        label: 'sortFields',
        helpText: 'Test',
    },
] as const;

const callbackRetrieveInput = [
    {
        key: 'callbackId',
        required: true,
        label: 'callbackId',
        helpText: 'Test',
    },
] as const;

const callbackUpdateInput = [
    {
        key: 'callbackId',
        required: true,
        label: 'callbackId',
        helpText: 'Test',
    },
    {
        key: 'name',
        required: true,
        label: 'Name',
        helpText: 'Test',
    },
    {
        key: 'url',
        required: true,
        label: 'Url',
        helpText: 'Test',
    },
    {
        key: 'auth',
        required: true,
        label: 'Auth',
        properties: [
                {
        key: 'type',
        required: false,
        label: 'Type',
        helpText: 'Test',
        choices: {
                'queryparam': 'queryparam',
                'httpheader': 'httpheader',
                'basicauth': 'basicauth',
                'bearertoken': 'bearertoken',
        }
    },
    {
        key: 'key',
        required: true,
        label: 'Key',
        helpText: 'Test',
    },

        ],
    },
    {
        key: 'contentType',
        required: true,
        label: 'ContentType',
        helpText: 'Test',
        choices: {
                'json': 'json',
                'xml': 'xml',
        }
    },
    {
        key: 'removeHTML',
        required: false,
        label: 'RemoveHTML',
        helpText: 'Test',
        choices: {
                'enabled': 'enabled',
                'disabled': 'disabled',
        }
    },
    {
        key: 'retriesEnabled',
        required: false,
        label: 'RetriesEnabled',
        helpText: 'Test',
    },
    {
        key: 'email',
        required: true,
        label: 'Email',
        helpText: 'Test',
    },
    {
        key: 'callbacks',
        required: true,
        label: 'Callbacks',
        properties: [
                {
        key: 'reply',
        required: false,
        label: 'Reply',
        helpText: 'Test',
        choices: {
                'enabled': 'enabled',
                'disabled': 'disabled',
        }
    },
    {
        key: 'undeliverable',
        required: false,
        label: 'Undeliverable',
        helpText: 'Test',
        choices: {
                'enabled': 'enabled',
                'disabled': 'disabled',
        }
    },

        ],
    },

] as const;


export const CallbacksApi = {
  key: 'callbacks',
  noun: 'Callbacks',
  create: {
    display: {
        label: 'Create a Callbacks',
        description: 'Test'
    },
    operation: {
        inputFields: generateInputFields(callbackCreateInput),
        perform: async (z: ZObject, bundle: InputBundle<typeof callbackCreateInput>) => {
            const {
                ...callback
            } = transformInputData(bundle.inputData);

            const localVarPath = bundle.authData.host + '/callbacks';
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = {};

            let localVarFormParams: any = {};
            localVarHeaderParams['Content-Type'] = 'application/vnd.whispir.api-callback-v1+json';
            localVarHeaderParams['Accept'] = 'application/vnd.whispir.api-callback-v1+json';

            let localVarUseFormData = false;

            const responsePromise = z.request({
                method: 'POST',
                headers: addHeaders(localVarHeaderParams, bundle),
                params: localVarQueryParameters,
                url: localVarPath,
                body: ObjectSerializer.serialize(callback, "Callback")
            });
            return responsePromise
                .then(response => {
                    if (response.status && response.status >= 200 && response.status <= 299) {
                            let body = {};
                            body = ObjectSerializer.deserialize(response.data, "Callback");
                            
                            // Special case to extract the resource identifier from the `Location` header.
                            const checkLocation = response?.headers?.location?.match(/\/([^\/]+)\/?$/);
                            let id = (checkLocation && checkLocation[1]) ? checkLocation[1] : undefined;
                            
                            return { id, ...body };
                    } else {
                            throw new z.errors.Error(response.data);
                    }
                });
        },
    }
  },
};
