/* tslint:disable:no-unused-locals */
import { ZObject } from "zapier-platform-core";
import { ObjectSerializer } from "../model/models";
import { generateInputFields, transformInputData, InputBundle } from "./apis";
import { addHeaders } from "../authentication";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

const sendTemplatedMessageInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "The identifier for the workspace.",
    dynamic: "workspaces.id.projectName",
  },
  {
    key: "to",
    required: true,
    label: "To",
    helpText:
      "Allows a combination of phone numbers, email address, Whispir Contact MRIs, User MRI, Distribution List MRI, separated by ,",
  },
  {
    key: "messageTemplateId",
    required: true,
    label: "MessageTemplateId",
    helpText: "The identifier for the Message Template",
    dynamic: "templates.id.messageTemplateName",
  },
] as const;

const messageCreateInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
    dynamic: "workspaces.id.projectName",
  },
  {
    key: "to",
    required: true,
    label: "To",
    helpText: "Test",
  },
  {
    key: "subject",
    required: true,
    label: "Subject",
    helpText: "Test",
  },
  {
    key: "body",
    required: false,
    label: "Body",
    helpText: "Test",
  },
  {
    key: "email",
    required: false,
    label: "Email",
    properties: [
      {
        key: "body",
        required: true,
        label: "Body",
        helpText: "Test",
      },
      {
        key: "footer",
        required: false,
        label: "Footer",
        helpText: "Test",
      },
      {
        key: "type",
        required: false,
        label: "Type",
        helpText: "Test",
        choices: {
          "text/plain": "text/plain",
          "text/html": "text/html",
        },
      },
      {
        key: "resources",
        required: false,
        label: "Resources",
        properties: [
          {
            key: "attachments",
            required: false,
            label: "Attachments",
            children: [
              {
                key: "attachmentName",
                required: true,
                label: "AttachmentName",
                helpText: "Test",
              },
              {
                key: "derefUri",
                required: true,
                label: "DerefUri",
                helpText: "Test",
              },
              {
                key: "attachmentDesc",
                required: false,
                label: "AttachmentDesc",
                helpText: "Test",
              },
            ],
          },
        ],
      },
    ],
  },
  {
    key: "voice",
    required: false,
    label: "Voice",
    properties: [
      {
        key: "header",
        required: false,
        label: "Header",
        helpText: "Test",
      },
      {
        key: "body",
        required: true,
        label: "Body",
        helpText: "Test",
      },
      {
        key: "type",
        required: false,
        label: "Type",
        helpText: "Test",
      },
      {
        key: "resources",
        required: false,
        label: "Resources",
        properties: [
          {
            key: "attachments",
            required: false,
            label: "Attachments",
            children: [
              {
                key: "attachmentName",
                required: true,
                label: "AttachmentName",
                helpText: "Test",
              },
              {
                key: "derefUri",
                required: true,
                label: "DerefUri",
                helpText: "Test",
              },
              {
                key: "attachmentDesc",
                required: false,
                label: "AttachmentDesc",
                helpText: "Test",
              },
            ],
          },
        ],
      },
    ],
  },
  {
    key: "web",
    required: false,
    label: "Web",
    properties: [
      {
        key: "body",
        required: false,
        label: "Body",
        helpText: "Test",
      },
      {
        key: "type",
        required: false,
        label: "Type",
        helpText: "Test",
        choices: {
          "text/plain": "text/plain",
          "text/html": "text/html",
        },
      },
    ],
  },
  {
    key: "social",
    required: false,
    label: "Social",
    properties: [
      {
        key: "social",
        required: false,
        label: "Social",
        children: [
          {
            key: "id",
            required: false,
            label: "Id",
            helpText: "Test",
            choices: {
              social: "social",
              social_long: "social_long",
            },
          },
          {
            key: "body",
            required: false,
            label: "Body",
            helpText: "Test",
          },
          {
            key: "type",
            required: false,
            label: "Type",
            helpText: "Test",
            choices: {
              "text/plain": "text/plain",
              "text/html": "text/html",
            },
          },
        ],
      },
    ],
  },
  {
    key: "type",
    required: false,
    label: "Type",
    helpText: "Test",
    choices: {
      default: "default",
      defaultNoReply: "defaultNoReply",
      noDlr: "noDlr",
    },
  },
  {
    key: "features",
    required: false,
    label: "Features",
    properties: [
      {
        key: "pushOptions",
        required: false,
        label: "PushOptions",
        properties: [
          {
            key: "notifications",
            required: false,
            label: "Notifications",
            helpText: "Test",
            choices: {
              enabled: "enabled",
              disabled: "disabled",
            },
          },
          {
            key: "escalationMins",
            required: false,
            label: "EscalationMins",
            helpText: "Test",
          },
          {
            key: "appId",
            required: true,
            label: "AppId",
            helpText: "Test",
          },
          {
            key: "priority",
            required: false,
            label: "Priority",
            helpText: "Test",
            choices: {
              NORMAL: "NORMAL",
              HIGH: "HIGH",
            },
          },
          {
            key: "fcm",
            required: false,
            label: "Fcm",
            properties: [
              {
                key: "androidChannelId",
                required: false,
                label: "AndroidChannelId",
                helpText: "Test",
              },
              {
                key: "sound",
                required: false,
                label: "Sound",
                helpText: "Test",
              },
              {
                key: "action",
                required: false,
                label: "Action",
                helpText: "Test",
              },
              {
                key: "image",
                required: false,
                label: "Image",
                helpText: "Test",
              },
            ],
          },
          {
            key: "apns",
            required: false,
            label: "Apns",
            properties: [
              {
                key: "sound",
                required: false,
                label: "Sound",
                helpText: "Test",
              },
              {
                key: "action",
                required: false,
                label: "Action",
                helpText: "Test",
              },
            ],
          },
          {
            key: "data",
            required: false,
            label: "Data",
            helpText: "Test",
          },
        ],
      },
      {
        key: "aliasOption",
        required: false,
        label: "AliasOption",
        properties: [
          {
            key: "aliasName",
            required: false,
            label: "AliasName",
            helpText: "Test",
          },
        ],
      },
    ],
  },
  {
    key: "resource",
    required: false,
    label: "Resource",
    properties: [
      {
        key: "name",
        required: true,
        label: "Name",
        helpText: "Test",
      },
      {
        key: "scope",
        required: true,
        label: "Scope",
        helpText: "Test",
        choices: {
          private: "private",
          public: "public",
        },
      },
      {
        key: "mimeType",
        required: true,
        label: "MimeType",
        helpText: "Test",
      },
      {
        key: "derefUri",
        required: true,
        label: "DerefUri",
        helpText: "Test",
      },
    ],
  },
  {
    key: "messageTemplateId",
    required: false,
    label: "MessageTemplateId",
    helpText: "Test",
    dynamic: "templates.id.messageTemplateName",
  },
  {
    key: "messageTemplateName",
    required: false,
    label: "MessageTemplateName",
    helpText: "Test",
  },
  {
    key: "callbackId",
    required: false,
    label: "CallbackId",
    helpText: "Test",
  },
  {
    key: "callbackParameters",
    required: false,
    label: "CallbackParameters",
    helpText: "Test",
  },
  {
    key: "label",
    required: false,
    label: "Label",
    helpText: "Test",
  },
  {
    key: "eventId",
    required: false,
    label: "EventId",
    helpText: "Test",
  },
  {
    key: "messageType",
    required: false,
    label: "MessageType",
    helpText: "Test",
    choices: {
      SCHEDULED: "SCHEDULED",
    },
  },
  {
    key: "scheduleType",
    required: false,
    label: "ScheduleType",
    helpText: "Test",
    choices: {
      ONCE: "ONCE",
      REPEAT: "REPEAT",
    },
  },
  {
    key: "scheduleDate",
    required: false,
    label: "ScheduleDate",
    helpText: "Test",
  },
  {
    key: "repetitionCount",
    required: false,
    label: "RepetitionCount",
    helpText: "Test",
  },
  {
    key: "repeatDays",
    required: false,
    label: "RepeatDays",
    helpText: "Test",
  },
  {
    key: "repeatHrs",
    required: false,
    label: "RepeatHrs",
    helpText: "Test",
  },
  {
    key: "repeatMin",
    required: false,
    label: "RepeatMin",
    helpText: "Test",
  },
  {
    key: "dlr",
    required: false,
    label: "Dlr",
    properties: [],
  },
] as const;

const messageListInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
  },
  {
    key: "limit",
    required: false,
    label: "limit",
    helpText: "Test",
  },
  {
    key: "offset",
    required: false,
    label: "offset",
    helpText: "Test",
  },
  {
    key: "sortOrder",
    required: false,
    label: "sortOrder",
    helpText: "Test",
    choices: {
      asc: "asc",
      desc: "desc",
    },
  },
  {
    key: "sortFields",
    required: false,
    label: "sortFields",
    helpText: "Test",
  },
] as const;

const messageResponseListInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
  },
  {
    key: "messageId",
    required: true,
    label: "messageId",
    helpText: "Test",
  },
  {
    key: "limit",
    required: false,
    label: "limit",
    helpText: "Test",
  },
  {
    key: "offset",
    required: false,
    label: "offset",
    helpText: "Test",
  },
  {
    key: "sortOrder",
    required: false,
    label: "sortOrder",
    helpText: "Test",
    choices: {
      asc: "asc",
      desc: "desc",
    },
  },
  {
    key: "sortFields",
    required: false,
    label: "sortFields",
    helpText: "Test",
  },
  {
    key: "view",
    required: false,
    label: "view",
    helpText: "Test",
    choices: {
      summary: "summary",
      detailed: "detailed",
    },
  },
  {
    key: "filter",
    required: false,
    label: "filter",
    helpText: "Test",
    choices: {
      noresponse: "noresponse",
      notmatched: "notmatched",
      responserule: "responserule",
    },
  },
] as const;

const messageRetrieveInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
  },
  {
    key: "messageId",
    required: true,
    label: "messageId",
    helpText: "Test",
  },
] as const;

const messageStatusListInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
  },
  {
    key: "messageId",
    required: true,
    label: "messageId",
    helpText: "Test",
  },
  {
    key: "limit",
    required: false,
    label: "limit",
    helpText: "Test",
  },
  {
    key: "offset",
    required: false,
    label: "offset",
    helpText: "Test",
  },
  {
    key: "sortOrder",
    required: false,
    label: "sortOrder",
    helpText: "Test",
    choices: {
      asc: "asc",
      desc: "desc",
    },
  },
  {
    key: "sortFields",
    required: false,
    label: "sortFields",
    helpText: "Test",
  },
  {
    key: "view",
    required: false,
    label: "view",
    helpText: "Test",
    choices: {
      summary: "summary",
      detailed: "detailed",
    },
  },
  {
    key: "filter",
    required: false,
    label: "filter",
    helpText: "Test",
    choices: {
      default: "default",
      responserule: "responserule",
    },
  },
] as const;

export const MessagesApi = {
  key: "messages",
  noun: "Messages",
  create: {
    display: {
      label: "Send Message",
      description: "Test",
    },
    operation: {
      inputFields: generateInputFields(messageCreateInput),
      perform: async (
        z: ZObject,
        bundle: InputBundle<typeof messageCreateInput>
      ) => {
        const { workspaceId, ...message } = transformInputData(
          bundle.inputData
        );

        const localVarPath =
          bundle.authData.host +
          "/workspaces/{workspaceId}/messages".replace(
            "{" + "workspaceId" + "}",
            encodeURIComponent(String(workspaceId))
          );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = {};

        let localVarFormParams: any = {};
        localVarHeaderParams["Content-Type"] =
          "application/vnd.whispir.message-v1+json";
        localVarHeaderParams["Accept"] =
          "application/vnd.whispir.message-v1+json";

        let localVarUseFormData = false;

        const responsePromise = z.request({
          method: "POST",
          headers: addHeaders(localVarHeaderParams, bundle),
          params: localVarQueryParameters,
          url: localVarPath,
          body: ObjectSerializer.serialize(message, "Message"),
        });
        return responsePromise.then((response) => {
          if (
            response.status &&
            response.status >= 200 &&
            response.status <= 299
          ) {
            let body = {};
            body = ObjectSerializer.deserialize(response.data, "Message");

            // Special case to extract the resource identifier from the `Location` header.
            const checkLocation =
              response?.headers?.location?.match(/\/([^\/]+)\/?$/);
            let id =
              checkLocation && checkLocation[1] ? checkLocation[1] : undefined;

            return { id, ...body };
          } else {
            throw new z.errors.Error(response.data);
          }
        });
      },
    },
  },
};

export const sendTemplatedMessage = {
  key: "sendTemplatedMessage",
  noun: "messagetemplate",
  display: {
    label: "Send Message With Template",
    description: "Specify the messageTemplateId in the messages request",
  },
  operation: {
    inputFields: generateInputFields(sendTemplatedMessageInput),
    perform: async (
      z: ZObject,
      bundle: InputBundle<typeof sendTemplatedMessageInput>
    ) => {
      const { workspaceId, ...message } = transformInputData(bundle.inputData);

      const localVarPath =
        bundle.authData.host +
        "/workspaces/{workspaceId}/messages".replace(
          "{" + "workspaceId" + "}",
          encodeURIComponent(String(workspaceId))
        );
      let localVarQueryParameters: any = {};
      let localVarHeaderParams: any = {};

      let localVarFormParams: any = {};
      localVarHeaderParams["Content-Type"] =
        "application/vnd.whispir.message-v1+json";
      localVarHeaderParams["Accept"] =
        "application/vnd.whispir.message-v1+json";

      let localVarUseFormData = false;

      const responsePromise = z.request({
        method: "POST",
        headers: addHeaders(localVarHeaderParams, bundle),
        params: localVarQueryParameters,
        url: localVarPath,
        body: ObjectSerializer.serialize(message, "Message"),
      });
      return responsePromise.then((response) => {
        if (
          response.status &&
          response.status >= 200 &&
          response.status <= 299
        ) {
          let body = {};
          body = ObjectSerializer.deserialize(response.data, "Message");

          // Special case to extract the resource identifier from the `Location` header.
          const checkLocation =
            response?.headers?.location?.match(/\/([^\/]+)\/?$/);
          let id =
            checkLocation && checkLocation[1] ? checkLocation[1] : undefined;

          return { id, ...body };
        } else {
          throw new z.errors.Error(response.data);
        }
      });
    },
  },
};
