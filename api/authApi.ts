/* tslint:disable:no-unused-locals */
import { ZObject } from 'zapier-platform-core'
import { ObjectSerializer } from '../model/models';
import { generateInputFields, transformInputData, InputBundle } from './apis';
import { addHeaders } from '../authentication';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

const authCreateInput = [
] as const;

const authVerificationRetrieveInput = [
] as const;


export const AuthApi = {
  key: 'auth',
  noun: 'Auth',
  create: {
    display: {
        label: 'Create a Auth',
        description: 'Test'
    },
    operation: {
        inputFields: generateInputFields(authCreateInput),
        perform: async (z: ZObject, bundle: InputBundle<typeof authCreateInput>) => {
            const {
            } = transformInputData(bundle.inputData);

            const localVarPath = bundle.authData.host + '/auth';
            let localVarQueryParameters: any = {};
            let localVarHeaderParams: any = {};

            let localVarFormParams: any = {};
            localVarHeaderParams['Content-Type'] = 'application/vnd.whispir.auth-v1+json';
            localVarHeaderParams['Accept'] = 'application/vnd.whispir.auth-v1+json';

            let localVarUseFormData = false;

            const responsePromise = z.request({
                method: 'POST',
                headers: addHeaders(localVarHeaderParams, bundle),
                params: localVarQueryParameters,
                url: localVarPath,
            });
            return responsePromise
                .then(response => {
                    if (response.status && response.status >= 200 && response.status <= 299) {
                            let body = {};
                            body = ObjectSerializer.deserialize(response.data, "Auth");
                            
                            // Special case to extract the resource identifier from the `Location` header.
                            const checkLocation = response?.headers?.location?.match(/\/([^\/]+)\/?$/);
                            let id = (checkLocation && checkLocation[1]) ? checkLocation[1] : undefined;
                            
                            return { id, ...body };
                    } else {
                            throw new z.errors.Error(response.data);
                    }
                });
        },
    }
  },
};
