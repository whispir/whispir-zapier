/* tslint:disable:no-unused-locals */
import { ZObject } from "zapier-platform-core";
import { ObjectSerializer } from "../model/models";
import { generateInputFields, transformInputData, InputBundle } from "./apis";
import { addHeaders } from "../authentication";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

const eventCreateInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
  },
  {
    key: "eventLabel",
    required: true,
    label: "EventLabel",
    helpText: "Test",
  },
  {
    key: "status",
    required: false,
    label: "Status",
    helpText: "Test",
    choices: {
      Open: "Open",
      Active: "Active",
      Resolved: "Resolved",
    },
  },
  {
    key: "eventFormList",
    required: false,
    label: "EventFormList",
    children: [
      {
        key: "formName",
        required: false,
        label: "FormName",
        helpText: "Test",
      },
      {
        key: "eventFieldList",
        required: false,
        label: "EventFieldList",
        dict: true,
      },
    ],
  },
] as const;

const eventListInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
  },
  {
    key: "eventType",
    required: true,
    label: "eventType",
    helpText: "Test",
  },
  {
    key: "limit",
    required: false,
    label: "limit",
    helpText: "Test",
  },
  {
    key: "offset",
    required: false,
    label: "offset",
    helpText: "Test",
  },
  {
    key: "sortOrder",
    required: false,
    label: "sortOrder",
    helpText: "Test",
    choices: {
      asc: "asc",
      desc: "desc",
    },
  },
  {
    key: "sortFields",
    required: false,
    label: "sortFields",
    helpText: "Test",
  },
] as const;

const eventRetrieveInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
  },
  {
    key: "eventId",
    required: true,
    label: "eventId",
    helpText: "Test",
  },
  {
    key: "limit",
    required: false,
    label: "limit",
    helpText: "Test",
  },
  {
    key: "offset",
    required: false,
    label: "offset",
    helpText: "Test",
  },
  {
    key: "sortOrder",
    required: false,
    label: "sortOrder",
    helpText: "Test",
    choices: {
      asc: "asc",
      desc: "desc",
    },
  },
  {
    key: "sortFields",
    required: false,
    label: "sortFields",
    helpText: "Test",
  },
] as const;

const eventUpdateInput = [
  {
    key: "workspaceId",
    required: true,
    label: "workspaceId",
    helpText: "Test",
  },
  {
    key: "eventId",
    required: true,
    label: "eventId",
    helpText: "Test",
  },
  {
    key: "eventLabel",
    required: true,
    label: "EventLabel",
    helpText: "Test",
  },
  {
    key: "status",
    required: false,
    label: "Status",
    helpText: "Test",
    choices: {
      Open: "Open",
      Active: "Active",
      Resolved: "Resolved",
    },
  },
  {
    key: "eventFormList",
    required: false,
    label: "EventFormList",
    children: [
      {
        key: "formName",
        required: false,
        label: "FormName",
        helpText: "Test",
      },
      {
        key: "eventFieldList",
        required: false,
        label: "EventFieldList",
        children: [
          {
            key: "name",
            required: false,
            label: "Name",
            helpText: "Test",
          },
          {
            key: "value",
            required: false,
            label: "Value",
            helpText: "Test",
          },
        ],
      },
    ],
  },
] as const;

export const EventsApi = {
  key: "events",
  noun: "Events",
  create: {
    display: {
      label: "Create a Events",
      description: "Test",
    },
    operation: {
      inputFields: generateInputFields(eventCreateInput),
      perform: async (
        z: ZObject,
        bundle: InputBundle<typeof eventCreateInput>
      ) => {
        const { workspaceId, ...event } = transformInputData(bundle.inputData);

        const localVarPath =
          bundle.authData.host +
          "/workspaces/{workspaceId}/events".replace(
            "{" + "workspaceId" + "}",
            encodeURIComponent(String(workspaceId))
          );
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = {};

        let localVarFormParams: any = {};
        localVarHeaderParams["Content-Type"] =
          "application/vnd.whispir.event-v1+json";
        localVarHeaderParams["Accept"] =
          "application/vnd.whispir.event-v1+json";

        let localVarUseFormData = false;

        const responsePromise = z.request({
          method: "POST",
          headers: addHeaders(localVarHeaderParams, bundle),
          params: localVarQueryParameters,
          url: localVarPath,
          body: ObjectSerializer.serialize(event, "Event"),
        });
        return responsePromise.then((response) => {
          if (
            response.status &&
            response.status >= 200 &&
            response.status <= 299
          ) {
            let body = {};
            body = ObjectSerializer.deserialize(response.data, "Event");

            // Special case to extract the resource identifier from the `Location` header.
            const checkLocation =
              response?.headers?.location?.match(/\/([^\/]+)\/?$/);
            let id =
              checkLocation && checkLocation[1] ? checkLocation[1] : undefined;

            return { id, ...body };
          } else {
            throw new z.errors.Error(response.data);
          }
        });
      },
    },
  },
};
